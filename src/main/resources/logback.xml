<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--自定义颜色配置-->
    <conversionRule conversionWord="customColor" converterClass="com.springBoot.utils.config.log.LogbackColorful"/>

    <!-- 输出信息到控制抬 -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>
                %customColor(%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} [%t] -> %m%n)
            </pattern>
        </encoder>
        <!-- 此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
    </appender>

    <!-- 输出INFO级别以上的日志到logs/info.log -->
    <appender name="infoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 日志文件名及路径 -->
        <!--<file>logs/info.log</file>-->

        <!-- 日志文件保留个数及备份命名方式 -->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>logs/info.%i.log</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>10</maxIndex>
        </rollingPolicy>-->

        <!-- 日志文件大小限制 -->
        <!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>10MB</maxFileSize>
        </triggeringPolicy>-->

        <!-- 日志记录追加方式 默认true -->
        <!--<append>true</append>-->


        <!--每天生成一个日志文件，保存30天的日志文件-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件命名路径及方式-->
            <fileNamePattern>logs/info.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!--文件保存最大历史天数-->
            <maxHistory>30</maxHistory>
        </rollingPolicy>

        <!-- 日志文件格式 -->
        <encoder>
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} [%t] -> %m%n
            </pattern>
        </encoder>

        <!-- 此日志记录级别 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
    </appender>

    <!--根logger控制 -->
    <root level="INFO">
        <appender-ref ref="stdout"/>
        <appender-ref ref="infoLog"/>
    </root>
</configuration>

        <!--
        #输出格式
        #%m 输出代码中指定的消息
        #%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
        #%r 输出自应用启动到输出该log信息耗费的毫秒数
        #%c 输出所属的类目，通常就是所在类的全名
        #%t 输出产生该日志事件的线程名
        #%n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”
        #%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
        #%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
        -->